<?php declare(strict_types=1);

namespace App\Model;

use App\Db;

class Transaction
{
    protected int $id;

    public function __construct(
        protected Account $from,
        protected Account $to,
        protected float   $amount
    )
    {
    }

    /**
     * Creates DB table using CREATE TABLE ...
     */
    public static function createTable(): void
    {
        $db = Db::get();
        $db->query('CREATE TABLE IF NOT EXISTS `transactions` (
            -- TODO implement - done
            `id` INTEGER PRIMARY KEY,
            `account_from` INTEGER,
            `account_to` INTEGER,
            `amount` INTEGER,
            FOREIGN KEY (`account_from`)
            REFERENCES `accounts` (`id`) 
               ON UPDATE SET NULL
               ON DELETE SET NULL
            FOREIGN KEY (`account_to`)
            REFERENCES `accounts` (`id`) 
               ON UPDATE SET NULL
               ON DELETE SET NULL
        )');
    }

    /**
     * Drops DB table using DROP TABLE ...
     */
    public static function dropTable(): void
    {
        // TODO implement - done
        $db = Db::get();
        $db->query('DROP TABLE IF EXISTS `transactions`;');
    }

    /**
     * Insert this instance into DB table `transaction`
     *
     * @return int inserted item autogenerated ID
     */
    public function insert(): int
    {
        // TODO implement - done
        $account_from = $this->getFrom()->getId();
        $account_to = $this->getTo()->getId();
        $amount = $this->getAmount();
        $db = Db::get();
        $query = 'INSERT INTO `transactions` (`account_from`, `account_to`, `amount`) VALUES (:account_from, :account_to, :amount)';
        $statement = $db->prepare($query);
        $statement->execute(['account_from' => $account_from, 'account_to' => $account_to, 'amount' => $amount]);
        $result = $db->lastInsertId();
        return (int)$result;
    }

    public function getId(): int
    {
        return $this->id;
    }

    public function setId(int $id): Transaction
    {
        $this->id = $id;
        return $this;
    }

    public function getFrom(): Account
    {
        return $this->from;
    }

    public function setFrom(Account $from): Transaction
    {
        $this->from = $from;
        return $this;
    }

    public function getTo(): Account
    {
        return $this->to;
    }

    public function setTo(Account $to): Transaction
    {
        $this->to = $to;
        return $this;
    }

    public function getAmount(): float
    {
        return $this->amount;
    }

    public function setAmount(float $amount): Transaction
    {
        $this->amount = $amount;
        return $this;
    }
}
