// test my applet
establish_context
enable_trace
enable_timer
card_connect

// select
send_apdu -sc 0 -APDU 00A40400080102030405060809

// -------------- TESTING SCRIPT 1 --------------------
// CLA INS P1 P2 Lc [data] Le; 
// Select hwb1.FirstApplet applet
// 0x00 0xA4 0x04 0x00 0x07 0x01 0x23 0x45 0x67 0x89 0x06 0x07 0x7F;

// ---------- TEST 2 - PIN -------
// get name 0x00 - EX: 0x4C 0x75 0x6b 0x61 0x73; 0x90 0x00
// 0x80 0x00 0x00 0x00 0x00 0x7f;
send_apdu -sc 0 -APDU 8000000010

// Unauthenticated
// send data 0x02 - EX: 0x63 0x01
// 0x80 0x02 0x00 0x00 0x03 0x01 0x02 0x03 0x7f;
send_apdu -sc 0 -APDU 8002000003010203
// get data 0x04 - EX: 0x63 0x01
// 0x80 0x04 0x00 0x00 0x00 0x03;
send_apdu -sc 0 -APDU  8004000003

// correct pin - EX: 0x90 0x00
// 0x80 0x20 0x00 0x00 0x04 0x31 0x32 0x33 0x34 0x7f;
send_apdu -sc 0 -APDU 802000000431323334

// Invalid requests
// wrong pin - EX: 0x63 0x00
// 0x80 0x20 0x00 0x00 0x04 0x01 0x01 0x01 0x01 0x7f;
send_apdu -sc 0 -APDU 802000000401010101

// correct pin - EX: 0x90 0x00
// 0x80 0x20 0x00 0x00 0x04 0x31 0x32 0x33 0x34 0x7f;
send_apdu -sc 0 -APDU 802000000431323334

// ----------- TEST 1 - BASIC FUNCTIONS -----------
// Valid requests
// get name 0x00 - EX: 0x4C 0x75 0x6b 0x61 0x73; 0x90 0x00
// 0x80 0x00 0x00 0x00 0x00 0x7f;
send_apdu -sc 0 -APDU 8000000005
// get name 0x00 - full body - EX: 0x90 0x00
// 0x80 0x00 0x00 0x00 0x01 0x66 0x01;
send_apdu -sc 0 -APDU 80000000016601
// send data 0x02 - EX: 0x90 0x00
// 0x80 0x02 0x00 0x00 0x03 0x01 0x02 0x03 0x7f;
send_apdu -sc 0 -APDU 8002000003010203
// get data 0x04 - EX: 0x3 0x1 0x2 0x3; 0x90 0x00
// 0x80 0x04 0x00 0x00 0x00 0x03;
send_apdu -sc 0 -APDU 8004000003
// get data 0x04 - full body - EX: 0x01 0x02 0x03; 0x90 0x00
// 0x80 0x04 0x00 0x00 0x02 0x01 0x01 0x03;
send_apdu -sc 0 -APDU 8004000002010103

// Invalid requests
// invalid class - EX: 0x6e 0x00
// 0x10 0x00 0x00 0x00 0x00 0x7f;
send_apdu -sc 0 -APDU 10000000
// get name 0x00 - invalid body - EX: 0x67 0x00
// 0x80 0x00 0x00 0x00 0x10 0x01;
send_apdu -sc 0 -APDU 800000001001
// invalid INS 0x03; EX: 0x6d 0x00
// 0x80 0x03 0x00 0x00 0x00 0x7f;
send_apdu -sc 0 -APDU 80030000
// get data 0x04 - too long; EX: 0x6c 0x03
// 0x80 0x04 0x00 0x00 0x00 0x30;
send_apdu -sc 0 -APDU 8004000030
// get data 0x04 - without length; EX: 0x6c 0x03
// 0x80 0x04 0x00 0x00 0x00 0x7f;
send_apdu -sc 0 -APDU 80040000
// get data 0x04 - too short; EX: 0x6c 0x03
// 0x80 0x04 0x00 0x00 0x00 0x01;
send_apdu -sc 0 -APDU 8004000001

// ----------- TEST 3 - ENCRYPTION -------------
// Valid data
// encrypt - EX 0x90 0x00
// 0x80 0x42 0x00 0x00 0x10
// 0x11 0x11 0x11 0x11
// 0x22 0x22 0x22 0x22
// 0x33 0x33 0x33 0x33
// 0x44 0x44 0x44 0x44
// 0x7f;
send_apdu -sc 0 -APDU 80420000101111111122222222333333334444444420

// decrypt - EX: 0x90 0x00
// 0x80 0x44 0x00 0x00 0x20
// 0xd6 0x60 0x5a 0xd0
// 0x82 0xad 0xba 0x79
// 0xf6 0x8d 0xad 0x26
// 0xae 0x30 0x9b 0x8c
// 0x46 0xff 0x88 0x9c
// 0x3d 0x5e 0xab 0xac
// 0xed 0x1e 0x90 0x16
// 0x39 0xcf 0x4e 0xf1
// 0x7f;
send_apdu -sc 0 -APDU 8044000020d6605ad082adba79f68dad26ae309b8c46ff889c3d5eabaced1e901639cf4ef110

// Invalid data
// encrypt too long - EX: 0x67 0x00
// 0x80 0x42 0x00 0x00 0x50
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x7f;
send_apdu -sc 0 -APDU 8042000050111111111111111111111111111111112222222222222222222222222222222233333333333333333333333333333333444444444444444444444444444444445555555555555555555555555555555560

// encrypt not aligned - EX: 0x67 0x00
// 0x80 0x42 0x00 0x00 0x02
// 0x11 0x11
// 0x7f;
send_apdu -sc 0 -APDU 8042000002111102

// decrypt not aligned - EX: 0x67 0x00
// 0x80 0x44 0x00 0x00 0x14
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x33 0x33 0x33 0x33
// 0x7f;
send_apdu -sc 0 -APDU 8044000014111111111111111111111111111111113333333324

// decrypt too long - EX: 0x67 0x00
// 0x80 0x44 0x00 0x00 0x60
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x11 0x11 0x11 0x11
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x22 0x22 0x22 0x22
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x33 0x33 0x33 0x33
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x44 0x44 0x44 0x44
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x55 0x55 0x55 0x55
// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x7f;
send_apdu -sc 0 -APDU 804400006011111111111111111111111111111111222222222222222222222222222222223333333333333333333333333333333344444444444444444444444444444444555555555555555555555555555555556666666666666666666666666666666650

// decrypt too short - EX: 0x67 0x00
// 0x80 0x44 0x00 0x00 0x06
// 0x22 0x22 0x22 0x22
// 0x33 0x33
// 0x7f;
send_apdu -sc 0 -APDU 8044000006222222333316

// decrypt different MAC - EX: 0x6a 0x80
// 0x80 0x44 0x00 0x00 0x20
// 0xd6 0x60 0x5a 0xd0
// 0x82 0xad 0xba 0x79
// 0xf6 0x8d 0xad 0x26
// 0xae 0x30 0x9b 0x8c

// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x66 0x66 0x66 0x66
// 0x7f;
send_apdu -sc 0 -APDU 8044000020d6605ad082adba79f68dad26ae309b8c6666666666666666666666666666666610

// End connection
card_disconnect
release_context